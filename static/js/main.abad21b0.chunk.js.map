{"version":3,"sources":["../../src/AnsiPre.tsx","../../src/index.tsx","index.js"],"names":["ansiClassNames","30","styles","31","32","33","34","35","36","37","ansi_white_fg","AnsiPre","children","r","splitted","spans","lastClassName","ansiCode","codes","c","ansiCodeToClassName","className","key","i","s","React","base64ToImage","mime","src","base64","DisplayDataOutput","datas","output","data","formats","test","raw","elements","dataframe","hidx","scope","rowidx","row","idx","getDataFrame","format","datalines","svg","srcDoc","Array","Error","StreamOutput","ErrorOutput","CodeCell","cell","props","source","input_prompt","inner_cell","language","output_prompt","PlainMarkdown","PlainCode","NbViewer","markdown","code","ipynb","JSON","notebook_container","MathMarkdown","renderers","math","value","block","inlineMath","plugins","MathPlugin","App","useState","setSource","useEffect","fetch","process","then","text","dragged","setDragged","readFile","file","reader","FileReader","onload","e","target","result","readAsText","style","margin","onDragOver","event","stopPropagation","preventDefault","onDrop","dataTransfer","files","onDragEnter","padding","border","backgroundColor","type","onChange","accept","Highlighter","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.abad21b0.chunk.js","sourcesContent":["import React from 'react'\nimport styles from './index.css'\n\nconst ansiClassNames = {\n  30: `ansi_black_fg ${styles.ansi_black_fg}`,\n  31: `ansi_red_fg ${styles.ansi_red_fg}`,\n  32: `ansi_green_fg ${styles.ansi_green_fg}`,\n  33: `ansi_yellow_fg ${styles.ansi_yellow_fg}`,\n  34: `ansi_blue_fg ${styles.ansi_blue_fg}`,\n  35: `ansi_magenta_fg ${styles.ansi_magenta_fg}`,\n  36: `ansi_cyan_fg ${styles.ansi_cyan_fg}`,\n  37: `ansi_white_fg ${styles.ansi_white_fg}`,\n}\n\nfunction ansiCodeToClassName(ansiCode: string) {\n  const codes = ansiCode.slice(2, -1).split(';')\n  if (codes === ['0'])\n    return null\n  return codes.map(c => ansiClassNames[c]).join(' ')\n}\n\nconst AnsiPre = ({ children }: { children: string }) => {\n  // <pre> with ANSI color codes\n  // \\033[SGR;FG;BGm\n  const r = /(\\x1b\\[.+?m)/g\n  const splitted = children.split(r)\n  const spans: React.ReactChild[] = []\n  let lastClassName: string | null = null\n  splitted.forEach((s, i) => {\n    if (r.test(s)) {\n      lastClassName = ansiCodeToClassName(s)\n      return\n    }\n    if (!lastClassName) spans.push(s)\n    else spans.push(<span className={lastClassName} key={i}>{s}</span>)\n  })\n  return <pre>{spans}</pre>\n}\n\nexport default AnsiPre\n","import React, { Fragment } from 'react'\nimport AnsiPre from './AnsiPre'\nimport styles from './index.css'\n\nconst base64ToImage = (mime: string, base64: string) => (\n  <img src={`data:${mime};base64,${base64}`} />\n)\n\n// Putting the 'text/html' output on page is ugly and unsafe\n// Instead, let's parse the raw output\nfunction getDataFrame(raw: string) {\n  const rows = raw.split('\\n')\n  const elements = rows.map(r => r.split(/\\s+/))\n  return (\n    <table className={`dataframe ${styles.dataframe}`}>\n      <thead>\n        <tr>\n          <td />\n          {/* Column headers */}\n          {elements[0].slice(1).map((h, hidx) => <th key={hidx} scope=\"col\">{h}</th>)}\n        </tr>\n      </thead>\n      <tbody>\n        {elements.slice(1).map((row, rowidx) => (\n          <tr key={rowidx}>\n            {/* Row header */}\n            <th scope=\"row\">{row[0]}</th>\n            {row.slice(1).map((d, idx) => <td key={idx}>{d}</td>)}\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  )\n}\n\nconst DisplayDataOutput = ({ output }: {\n  output: NbDisplayDataOutput\n}) => {\n  const { data: datas } = output\n  const formats = ['text/html', 'image/svg+xml', 'image/png', 'image/jpeg', 'text/plain']\n\n  // e.g. pandas.DataFrame\n  if ((formats[0] in datas) && (formats[4] in datas) &&\n    datas[formats[0]].join('').includes('class=\"dataframe\"') &&\n    ! /^<.+>$/.test(datas[formats[4]])) {\n    return getDataFrame(datas[formats[4]].join(''))\n  }\n\n  for (const format of formats) {\n    if (format in datas) {\n      const datalines = datas[format]\n      if (format === 'image/svg+xml') {\n        const svg = datalines.join('')\n        return <img src={`data:image/svg+xml;utf8,${svg}`} />\n      }\n      if (format === 'text/html')\n        return <iframe srcDoc={datalines.join('')} />\n      if (format.startsWith('image/')) {\n        if (Array.isArray(datalines))\n          return base64ToImage(format, datalines[0])\n        return base64ToImage(format, datalines)\n      }\n      return <AnsiPre>{datalines.join('')}</AnsiPre>\n    }\n  }\n  throw new Error('Unsupported output format')\n}\n\nconst StreamOutput = ({ output }: { output: NbStreamOutput }) => {\n  const className = `output_stream ${styles.output_stream} ${\n    output.name === 'stderr' ? `output_stderr ${styles.output_stderr}` : ''\n    }`\n  return (\n    <div className={className}>\n      <AnsiPre>{output.text.join('')}</AnsiPre>\n    </div>\n  )\n}\n\nconst ErrorOutput = ({ output }: { output: NbErrorOutput }) => {\n  // Some ANSI escape codes are used to colorize the error output\n  return <AnsiPre>{output.traceback.join('')}</AnsiPre>\n}\n\ninterface CodeComponentProps {\n  language: string\n  children: string\n}\n\nconst CodeCell = ({ cell, ...props }: {\n  cell: NbCodeCell,\n  language: string,\n  code: React.ElementType<CodeComponentProps>\n}) => {\n  const source = cell.source.join('')\n\n  return (\n    <Fragment>\n      {/* \"In [...]:\" for every code cell */}\n      <div className={`input_prompt ${styles.input_prompt}`}>\n        <pre>{`In [${cell.execution_count || ' '}]:`}</pre>\n      </div>\n      <div className={`inner_cell ${styles.inner_cell}`}>\n        <props.code language={props.language}>{source}</props.code>\n      </div>\n      {cell.outputs.map((output, i) => {\n        return <Fragment key={i}>\n\n          {output.output_type === 'execute_result' &&\n            <div className={`output_prompt ${styles.output_prompt}`}>\n              <pre>{`Out[${output.execution_count}]:`}</pre>\n            </div>}\n\n          <div className={`inner_cell ${styles.inner_cell}`}>\n            {(() => {\n              switch (output.output_type) {\n                // The only difference between these two is \"Out[...]:\"\n                case 'execute_result':\n                case 'display_data':\n                  return <DisplayDataOutput output={output} />\n                case 'stream':\n                  return <StreamOutput output={output} />\n                case 'error':\n                  return <ErrorOutput output={output} />\n                default:\n                  return undefined\n              }\n            })()}\n          </div>\n\n        </Fragment>\n      })}\n    </Fragment>\n  )\n}\n\ninterface MarkdownProps {\n  source: string\n}\n\ninterface NbViewerProps {\n  source: string | NbFormat,\n  markdown?: React.ElementType<MarkdownProps>,\n  code?: React.ElementType<CodeComponentProps>\n}\n\nexport default function NbViewer({\n  source,\n  markdown = PlainMarkdown,\n  code = PlainCode\n}: NbViewerProps) {\n  if (!source) return null\n  const ipynb: NbFormat = typeof source === 'string' ? JSON.parse(source) : source\n  // TODO: support more versions\n  if (ipynb.nbformat !== 4)\n    throw new Error('react-nbviewer currently supports nbformat 4 only')\n\n  const language =\n    ipynb.metadata.kernelspec?.language ||\n    ipynb.metadata.language_info?.name || 'python'\n\n  return (\n    <div className={`notebook_container ${styles.notebook_container}`}>\n      {ipynb.cells.map((cell, i) => (\n        cell.cell_type === 'code' ?\n          <CodeCell cell={cell} language={language} code={code} key={i} /> :\n\n          <div className={`inner_cell ${styles.inner_cell}`}>{\n            // Not using JSX here because \"markdown\" is in lower case\n            React.createElement(markdown, {\n              source: cell.source.join(''),\n              key: i\n            }, null)\n          }</div>\n      ))}\n    </div>\n  )\n}\n\n// Defaults when not provided\nfunction PlainMarkdown(props: MarkdownProps) {\n  return <div>{props.source}</div>\n}\n\nfunction PlainCode(props: CodeComponentProps) {\n  return <pre><code>{props.children}</code></pre>\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport NbViewer from 'react-nbviewer'\nimport Markdown from 'react-markdown'\nimport MathPlugin from 'remark-math'\nimport TeX from '@matejmazur/react-katex'\nimport Highlighter from 'react-syntax-highlighter'\n\nimport 'react-nbviewer/dist/index.css'\nimport 'katex/dist/katex.min.css'\n\nconst MathMarkdown = (props) => {\n  const renderers = {\n    math: ({ value }) => <TeX block math={value} />,\n    inlineMath: ({ value }) => <TeX math={value} />,\n    code: props =>\n      <Highlighter language={props.language}>{props.value}</Highlighter>\n  }\n  return (\n    <Markdown\n      renderers={renderers}\n      plugins={[MathPlugin]}\n      source={props.source} />\n  )\n}\n\nconst App = () => {\n  const [source, setSource] = React.useState('')\n  React.useEffect(() => {\n    fetch(process.env.PUBLIC_URL + '/example.ipynb')\n      .then(src => src.text())\n      .then(src => setSource(src))\n  }, [])\n  const [dragged, setDragged] = React.useState(false)\n\n  function readFile(file) {\n    if (!file)\n      return\n    const reader = new FileReader()\n    reader.onload = (e) =>\n      setSource(e.target.result)\n    reader.readAsText(file)\n  }\n  function onInputChange(event) {\n    event.preventDefault()\n    readFile(event.target.files[0])\n  }\n  function onDrop(event) {\n    event.preventDefault()\n    readFile(event.dataTransfer.files[0])\n    setDragged(false)\n  }\n  function onDragOver(event) {\n    event.stopPropagation()\n    event.preventDefault()\n  }\n  function onDragEnter(event) {\n    event.stopPropagation()\n    event.preventDefault()\n    setDragged(true)\n  }\n\n  return (\n    <div\n      style={{ margin: '0 1%' }}\n      onDragOver={onDragOver}\n      onDrop={onDrop}>\n      <div onDragEnter={onDragEnter} style={{\n        padding: 20,\n        border: '1px solid #999',\n        backgroundColor: dragged ? '#ddd' : '#efefef'\n      }}>\n        <span>Drag and drop file here or </span>\n        <input type=\"file\" onChange={onInputChange}\n          accept=\".ipynb,application/x-ipynb+json\" />\n      </div>\n      <NbViewer source={source} markdown={MathMarkdown} code={Highlighter} />\n    </div>\n  )\n}\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}